# -*- coding: utf-8 -*-
"""Diabetes_Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15sgtUgjKCLdhi4ZF9kNfUYix_rMSYeic
"""

import  pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

file_path = '/content/drive/MyDrive/DataSet/diabetes_dataset.csv'
Diabetes_data = pd.read_csv(file_path)

Diabetes_data.head()

Diabetes_data.info()

Diabetes_data.describe()

bins = [0, 18, 35, 50, 100]
labels = ['Teens', 'Youths', 'Young Adults', 'Adults']
Diabetes_data['Age Group'] = pd.cut(Diabetes_data['Age'], bins=bins, labels=labels, right=False)
Diabetes_data[['Age', 'Age Group']].head()

Diabetes_data['Age Group'].value_counts().plot(kind='bar', color=['blue', 'orange', 'green', 'red', 'purple'])

plt.xlabel("Age Group")
plt.ylabel("Count")
plt.title("Age Group Distribution")
plt.show()

Gender_count = Diabetes_data['Sex'].value_counts()
Gender_count

Totel_Patient = len(Diabetes_data)
Totel_Patient

Count_by_group = Diabetes_data['Ethnicity'].value_counts()
Count_by_group

Gender_by_Ethnicity = Diabetes_data.groupby(['Ethnicity', 'Sex']).size().reset_index(name='Count')
Gender_by_Ethnicity

Count_by_Activity_level = Diabetes_data['Physical_Activity_Level'].value_counts()
Count_by_Activity_level

Count_by_alcohol = Diabetes_data['Alcohol_Consumption'].value_counts()
Count_by_alcohol

Gender_by_Alcohol_consumption = Diabetes_data.groupby(['Sex','Alcohol_Consumption']).size().reset_index(name='Count')
Gender_by_Alcohol_consumption

Count_by_smoking_habit = Diabetes_data['Smoking_Status'].value_counts()
Count_by_smoking_habit

Smoking_by_Gender = Diabetes_data.groupby(['Sex', 'Smoking_Status']).size().reset_index(name='Count')
Smoking_by_Gender

"""##Model Development##"""



from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.metrics import mean_squared_error as mse

model = LinearRegression()

Diabetes_data.Ethnicity.unique()

enc = OneHotEncoder()
enc.fit(Diabetes_data[['Ethnicity']])
one_hot = enc.transform(Diabetes_data[['Ethnicity']]).toarray()
one_hot

le = LabelEncoder()
le.fit(Diabetes_data[['Sex']])
Diabetes_data['Sex'] = le.transform(Diabetes_data[['Sex']])
Diabetes_data.head()

from re import M
le = LabelEncoder()
le.fit(Diabetes_data[['Smoking_Status']])
Diabetes_data['Smoking_Status'] = le.transform(Diabetes_data[['Smoking_Status']])
Diabetes_data.head()

ethnicity_df = pd.DataFrame(one_hot, columns=enc.get_feature_names_out(['Ethnicity']), index=Diabetes_data.index)
Diabetes_data = pd.concat([Diabetes_data, ethnicity_df], axis=1)
targets = Diabetes_data[['Ethnicity_White', 'Ethnicity_Asian', 'Ethnicity_Black', 'Ethnicity_Hispanic']]
inputs = Diabetes_data.drop(columns=['Ethnicity_White', 'Ethnicity_Asian', 'Ethnicity_Black', 'Ethnicity_Hispanic'])

for column in inputs.select_dtypes(include=['object']).columns:
    if inputs[column].nunique() > 2:
        enc = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
        encoded_data = enc.fit_transform(inputs[[column]])
        encoded_df = pd.DataFrame(encoded_data, columns=[f"{column}_{val}" for val in enc.categories_[0]], index=inputs.index)
        inputs = inputs.drop(columns=[column]).join(encoded_df)
    else:
        le = LabelEncoder()
        inputs[column] = le.fit_transform(inputs[column])

le = LabelEncoder()
inputs['Age Group'] = le.fit_transform(inputs['Age Group'])

model.fit(inputs, targets)

predictions = model.predict(inputs)

predictions = model.predict(inputs)
predictions

targets

mse(targets, predictions)

import joblib

filename = "reg_model.joblib"
enc_name = "encoder.joblib"
le = "le_sex.joblib"
le = "le_smk.joblib"

joblib.dump(model, filename)
joblib.dump(enc, enc_name)
joblib.dump(le, le_sex_name)
joblib.dump(le, le_smk_name)

